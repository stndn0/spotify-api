{"ast":null,"code":"var _jsxFileName = \"/home/wolv/repos/spotify-api/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Server data that is stored on the client side.\n  const [backendData, setBackendData] = useState([{}]);\n  useEffect(() => {\n    // Fetch data from the route on the back-end server.\n    fetch(\"/api\").then(\n    // Convert the response to json\n    response => response.json()).then(data => {\n      // Update the local data on the client side\n      setBackendData(data);\n    });\n  }, []); // Empty array so that this only runs on the first render of the component\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), typeof backendData.users === 'undefined' ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading data from server...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : backendData.users.map((user, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lSbdPEQgG/af9fOvqlnzEvHwb4Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","App","backendData","setBackendData","fetch","then","response","json","data","users","map","user","i"],"sources":["/home/wolv/repos/spotify-api/client/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\n\nfunction App() {\n  // Server data that is stored on the client side.\n  const [backendData, setBackendData] = useState([{}])\n\n  useEffect( () => {\n    // Fetch data from the route on the back-end server.\n    fetch(\"/api\").then(\n      // Convert the response to json\n      response => response.json()\n    ).then (\n      data => {\n        // Update the local data on the client side\n        setBackendData(data)\n      }\n    )\n\n  }, [])  // Empty array so that this only runs on the first render of the component\n\n  return (\n    <div>\n      <h1>Hello</h1>\n\n      {(typeof backendData.users === 'undefined') ? (\n        <h2>Loading data from server...</h2>\n      )\n      :(\n        backendData.users.map((user, i) => (\n          <p key={i}>{user}</p>\n        ))\n      )}\n\n    </div>\n  )\n}\n\nexport default App"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAA;AAEhD,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEpDD,SAAS,CAAE,MAAM;IACf;IACAK,KAAK,CAAC,MAAM,CAAC,CAACC,IAAI;IAChB;IACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAC5B,CAACF,IAAI,CACJG,IAAI,IAAI;MACN;MACAL,cAAc,CAACK,IAAI,CAAC;IACtB,CAAC,CACF;EAEH,CAAC,EAAE,EAAE,CAAC,EAAE;;EAER,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc,EAEZ,OAAON,WAAW,CAACO,KAAK,KAAK,WAAW,gBACxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoC,GAGpCP,WAAW,CAACO,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBAC5B;MAAA,UAAYD;IAAI,GAARC,CAAC;MAAA;MAAA;MAAA;IAAA,QACV,CACF;EAAA;IAAA;IAAA;IAAA;EAAA,QAEG;AAEV;AAAC,GAjCQX,GAAG;AAAA,KAAHA,GAAG;AAmCZ,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}