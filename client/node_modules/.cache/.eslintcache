[{"/home/wolv/repos/spotify-api/client/src/index.js":"1","/home/wolv/repos/spotify-api/client/src/App.js":"2","/home/wolv/repos/spotify-api/client/src/reportWebVitals.js":"3","/home/wolv/repos/spotify-api/client/src/pages/Home.js":"4","/home/wolv/repos/spotify-api/client/src/helpers/parseSpotifyAuthResponse.js":"5"},{"size":660,"mtime":1669103673264,"results":"6","hashOfConfig":"7"},{"size":612,"mtime":1669103714274,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1669001905087,"results":"9","hashOfConfig":"7"},{"size":3265,"mtime":1669102885574,"results":"10","hashOfConfig":"7"},{"size":777,"mtime":1669099625345,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1jqshx7",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/home/wolv/repos/spotify-api/client/src/index.js",["29"],[],"/home/wolv/repos/spotify-api/client/src/App.js",["30","31"],[],"/home/wolv/repos/spotify-api/client/src/reportWebVitals.js",[],[],[],"/home/wolv/repos/spotify-api/client/src/pages/Home.js",["32"],[],"import React, { useEffect, useState } from 'react'\nimport { getSpotifyAuthResponse } from '../helpers/parseSpotifyAuthResponse';\n\n\n// https://dev.to/dom_the_dev/how-to-use-the-spotify-api-in-your-react-js-app-50pn#authentication\n\nexport default function Home(props) {\n  // This is the query sent by the client to the Spotify authentication server.\n  const query =\n  {\n    \"client_id\": \"edcd5a7d1ed6481ebf796b856adaefcf\",\n    \"auth_endpoint\": \"https://accounts.spotify.com/authorize\",\n    \"response_type\": \"token\",\n    \"redirect_uri\": \"http://localhost:3000/\",\n    \"scope\": \"user-follow-read\",\n    \"show_dialog\": \"true\"\n  }\n\n  // Store the spotify auth token as a state variable. \n  // No token (i.e. unauthorized) will default to 0.\n  // const [token, setToken] = useState(0);\n\n  // Code within useEffect will execute whenever the page is re-rendered.\n  useEffect(() => {\n    // Run if the browser url has some data within it (e.g. URL recieved from spotify auth)\n    if (window.location.hash) {\n      // Object destructuring. Helper function is called and the returned variables are stored.\n      // Note that tokens are valid for 1 hour. \n      const { access_token, expires_in, token_type } = getSpotifyAuthResponse(window.location.hash);\n\n      // Note - not 100% sure if I really need localStorage. Will come back to this.\n      localStorage.clear();\n      localStorage.setItem(\"accessToken\", access_token);\n      localStorage.setItem(\"tokenType\", token_type);\n      localStorage.setItem(\"expiresIn\", expires_in);\n      props.setToken(access_token)\n\n      console.log(\"DEBUG TOKEN: \", access_token)\n    }\n  })\n\n\n  const pageContent = () => {\n    // Case - user not authorized -> assume they need to login to get a fresh token.\n    if (props.token === 0) {\n      return (\n        <div>\n          <h2>Not logged in.</h2>\n          <a href=\n            {`${query.auth_endpoint}?client_id=${query.client_id}&redirect_uri=${query.redirect_uri}&response_type=${query.response_type}&scope=${query.scope}`}\n          >Authorize</a>\n        </div>\n      )\n    }\n\n\n    // Case - user is authorized\n    else {\n      // Remove hashes from the URL bar to stop the useEffect 'if' condition from firing.\n      window.history.replaceState({}, document.title, \" \");\n      return (\n        <div>\n          <h2>Logged in.</h2>\n          <button onClick={() => deleteTokenAndData()}>Logout</button>\n        </div>\n      )\n    }\n  }\n\n\n  /* Token and local storage data is cleared client side. Note that the app is still connected to the \n  users Spotify account. If they want to 'de-authorize' the app they need to manually disconnect it via their Spotify 'manage apps' setting.\n  */\n  const deleteTokenAndData = () => {\n    localStorage.clear();\n    props.setToken(0);\n  }\n\n\n  return (\n    <div id=\"homepage\">\n      <h1>Homepage</h1>\n      {pageContent()}\n      <h3>Current Token: {props.token}</h3>\n    </div>\n  )\n}\n\n\n// https://accounts.spotify.com/authorize?client_id=edcd5a7d1ed6481ebf796b856adaefcf?show_dialog=true\n// ^^^ note the last show_dialog=true query here\n\n\n// const testAPI = async () => {\n//   const result = await fetch('http://localhost:5000/api_login');\n//   const jsonResult = result.json();\n//   console.log(\"Got response\")\n//   console.log(jsonResult);\n// }\n","/home/wolv/repos/spotify-api/client/src/helpers/parseSpotifyAuthResponse.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":26},{"ruleId":"33","severity":1,"message":"38","line":2,"column":25,"nodeType":"35","messageId":"36","endLine":2,"endColumn":38},{"ruleId":"33","severity":1,"message":"39","line":1,"column":28,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'BrowserRouter' is defined but never used.","'useState' is defined but never used."]